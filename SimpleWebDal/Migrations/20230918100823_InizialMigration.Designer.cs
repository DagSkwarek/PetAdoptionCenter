// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleWebDal.Data;

#nullable disable

namespace SimpleWebDal.Migrations
{
    [DbContext(typeof(PetAdoptionCenterContext))]
    [Migration("20230918100823_InizialMigration")]
    partial class InizialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("SimpleWebDal.Models.AdoptionProccess.Adoption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdoptedPetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdopterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdoption")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdoptedPetId");

                    b.HasIndex("AdopterId");

                    b.HasIndex("ShelterId");

                    b.ToTable("AdoptionInfos");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.BasicHealthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PetId")
                        .IsUnique();

                    b.ToTable("BasicHealthInfos");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasicHealthInfoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("IllnessEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IllnessStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameOfdisease")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BasicHealthInfoId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("AvaibleForAdoption")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CallendarId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CallendarId");

                    b.HasIndex("Id");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.Vaccination", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasicHealthInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("VaccinationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasicHealthInfoId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("SimpleWebDal.Models.CalendarModel.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AcctivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("SimpleWebDal.Models.CalendarModel.CalendarActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateWithTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("SimpleWebDal.Models.PetShelter.Shelter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CalendarActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShelterDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CalendarActivityId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Shelters");
                });

            modelBuilder.Entity("SimpleWebDal.Models.ProfileUser.ProfileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SimpleWebDal.Models.TemporaryHouse.TempHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartOfTemporaryHouseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ShelterId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TempHouses");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FlatNumber")
                        .HasColumnType("integer");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.BasicInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BasicInformations");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.Credentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasicInformationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CredentialsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserCalendarId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BasicInformationId");

                    b.HasIndex("CredentialsId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserCalendarId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("SimpleWebDal.Models.WebUser.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.WebUser.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleWebDal.Models.AdoptionProccess.Adoption", b =>
                {
                    b.HasOne("SimpleWebDal.Models.Animal.Pet", "AdoptedPet")
                        .WithMany()
                        .HasForeignKey("AdoptedPetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.WebUser.User", "Adopter")
                        .WithMany()
                        .HasForeignKey("AdopterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.PetShelter.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdoptedPet");

                    b.Navigation("Adopter");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.BasicHealthInfo", b =>
                {
                    b.HasOne("SimpleWebDal.Models.Animal.Pet", "Pet")
                        .WithOne("BasicHealthInfo")
                        .HasForeignKey("SimpleWebDal.Models.Animal.BasicHealthInfo", "PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.Disease", b =>
                {
                    b.HasOne("SimpleWebDal.Models.Animal.BasicHealthInfo", "BasicHealthInfo")
                        .WithMany()
                        .HasForeignKey("BasicHealthInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.Animal.BasicHealthInfo", null)
                        .WithMany("MedicalHistory")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicHealthInfo");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.Pet", b =>
                {
                    b.HasOne("SimpleWebDal.Models.CalendarModel.CalendarActivity", "Callendar")
                        .WithMany()
                        .HasForeignKey("CallendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.PetShelter.Shelter", null)
                        .WithMany("ShelterPets")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.ProfileUser.ProfileModel", null)
                        .WithMany("ProfilePets")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.TemporaryHouse.TempHouse", null)
                        .WithMany("PetsInTemporaryHouse")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Callendar");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.Vaccination", b =>
                {
                    b.HasOne("SimpleWebDal.Models.Animal.BasicHealthInfo", "BasicHealthInfo")
                        .WithMany()
                        .HasForeignKey("BasicHealthInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.Animal.BasicHealthInfo", null)
                        .WithMany("Vaccinations")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicHealthInfo");
                });

            modelBuilder.Entity("SimpleWebDal.Models.CalendarModel.Activity", b =>
                {
                    b.HasOne("SimpleWebDal.Models.CalendarModel.CalendarActivity", null)
                        .WithMany("Activities")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleWebDal.Models.PetShelter.Shelter", b =>
                {
                    b.HasOne("SimpleWebDal.Models.WebUser.Address", "ShelterAddress")
                        .WithOne("Shelter")
                        .HasForeignKey("SimpleWebDal.Models.PetShelter.Shelter", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.CalendarModel.CalendarActivity", "ShelterCalendar")
                        .WithOne("Shelter")
                        .HasForeignKey("SimpleWebDal.Models.PetShelter.Shelter", "CalendarActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShelterAddress");

                    b.Navigation("ShelterCalendar");
                });

            modelBuilder.Entity("SimpleWebDal.Models.ProfileUser.ProfileModel", b =>
                {
                    b.HasOne("SimpleWebDal.Models.WebUser.User", "UserLogged")
                        .WithOne("ProfileUser")
                        .HasForeignKey("SimpleWebDal.Models.ProfileUser.ProfileModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogged");
                });

            modelBuilder.Entity("SimpleWebDal.Models.TemporaryHouse.TempHouse", b =>
                {
                    b.HasOne("SimpleWebDal.Models.WebUser.Address", "TemporaryHouseAddress")
                        .WithOne("TemporaryHouse")
                        .HasForeignKey("SimpleWebDal.Models.TemporaryHouse.TempHouse", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.PetShelter.Shelter", "ShelterName")
                        .WithOne("TempHouse")
                        .HasForeignKey("SimpleWebDal.Models.TemporaryHouse.TempHouse", "ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.WebUser.User", "TemporaryOwner")
                        .WithOne("TempHouse")
                        .HasForeignKey("SimpleWebDal.Models.TemporaryHouse.TempHouse", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShelterName");

                    b.Navigation("TemporaryHouseAddress");

                    b.Navigation("TemporaryOwner");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.BasicInformation", b =>
                {
                    b.HasOne("SimpleWebDal.Models.WebUser.Address", "Address")
                        .WithOne()
                        .HasForeignKey("SimpleWebDal.Models.WebUser.BasicInformation", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.User", b =>
                {
                    b.HasOne("SimpleWebDal.Models.WebUser.BasicInformation", "BasicInformation")
                        .WithMany()
                        .HasForeignKey("BasicInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.WebUser.Credentials", "Credentials")
                        .WithMany()
                        .HasForeignKey("CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.Animal.Pet", null)
                        .WithMany("PatronUsers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.PetShelter.Shelter", null)
                        .WithMany("ShelterUsers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleWebDal.Models.CalendarModel.CalendarActivity", "UserCalendar")
                        .WithMany()
                        .HasForeignKey("UserCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicInformation");

                    b.Navigation("Credentials");

                    b.Navigation("UserCalendar");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.BasicHealthInfo", b =>
                {
                    b.Navigation("MedicalHistory");

                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("SimpleWebDal.Models.Animal.Pet", b =>
                {
                    b.Navigation("BasicHealthInfo");

                    b.Navigation("PatronUsers");
                });

            modelBuilder.Entity("SimpleWebDal.Models.CalendarModel.CalendarActivity", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("SimpleWebDal.Models.PetShelter.Shelter", b =>
                {
                    b.Navigation("ShelterPets");

                    b.Navigation("ShelterUsers");

                    b.Navigation("TempHouse");
                });

            modelBuilder.Entity("SimpleWebDal.Models.ProfileUser.ProfileModel", b =>
                {
                    b.Navigation("ProfilePets");
                });

            modelBuilder.Entity("SimpleWebDal.Models.TemporaryHouse.TempHouse", b =>
                {
                    b.Navigation("PetsInTemporaryHouse");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.Address", b =>
                {
                    b.Navigation("Shelter");

                    b.Navigation("TemporaryHouse");
                });

            modelBuilder.Entity("SimpleWebDal.Models.WebUser.User", b =>
                {
                    b.Navigation("ProfileUser");

                    b.Navigation("TempHouse");
                });
#pragma warning restore 612, 618
        }
    }
}
